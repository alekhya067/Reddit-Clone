// internal/proto/reddit.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.3
// source: internal/proto/reddit.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RedditService_RegisterAccount_FullMethodName = "/reddit.RedditService/RegisterAccount"
	RedditService_CreateSubreddit_FullMethodName = "/reddit.RedditService/CreateSubreddit"
	RedditService_JoinSubreddit_FullMethodName   = "/reddit.RedditService/JoinSubreddit"
	RedditService_LeaveSubreddit_FullMethodName  = "/reddit.RedditService/LeaveSubreddit"
	RedditService_CreatePost_FullMethodName      = "/reddit.RedditService/CreatePost"
	RedditService_CreateComment_FullMethodName   = "/reddit.RedditService/CreateComment"
	RedditService_Vote_FullMethodName            = "/reddit.RedditService/Vote"
	RedditService_GetFeed_FullMethodName         = "/reddit.RedditService/GetFeed"
	RedditService_SendMessage_FullMethodName     = "/reddit.RedditService/SendMessage"
	RedditService_GetUserMessages_FullMethodName = "/reddit.RedditService/GetUserMessages"
)

// RedditServiceClient is the client API for RedditService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedditServiceClient interface {
	RegisterAccount(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*UserResponse, error)
	CreateSubreddit(ctx context.Context, in *SubredditRequest, opts ...grpc.CallOption) (*SubredditResponse, error)
	JoinSubreddit(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	LeaveSubreddit(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	CreatePost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*PostResponse, error)
	CreateComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error)
	Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	GetFeed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*FeedResponse, error)
	SendMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	GetUserMessages(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*MessagesResponse, error)
}

type redditServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRedditServiceClient(cc grpc.ClientConnInterface) RedditServiceClient {
	return &redditServiceClient{cc}
}

func (c *redditServiceClient) RegisterAccount(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, RedditService_RegisterAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redditServiceClient) CreateSubreddit(ctx context.Context, in *SubredditRequest, opts ...grpc.CallOption) (*SubredditResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubredditResponse)
	err := c.cc.Invoke(ctx, RedditService_CreateSubreddit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redditServiceClient) JoinSubreddit(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, RedditService_JoinSubreddit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redditServiceClient) LeaveSubreddit(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, RedditService_LeaveSubreddit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redditServiceClient) CreatePost(ctx context.Context, in *PostRequest, opts ...grpc.CallOption) (*PostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, RedditService_CreatePost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redditServiceClient) CreateComment(ctx context.Context, in *CommentRequest, opts ...grpc.CallOption) (*CommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentResponse)
	err := c.cc.Invoke(ctx, RedditService_CreateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redditServiceClient) Vote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, RedditService_Vote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redditServiceClient) GetFeed(ctx context.Context, in *FeedRequest, opts ...grpc.CallOption) (*FeedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeedResponse)
	err := c.cc.Invoke(ctx, RedditService_GetFeed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redditServiceClient) SendMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, RedditService_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redditServiceClient) GetUserMessages(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*MessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessagesResponse)
	err := c.cc.Invoke(ctx, RedditService_GetUserMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedditServiceServer is the server API for RedditService service.
// All implementations must embed UnimplementedRedditServiceServer
// for forward compatibility.
type RedditServiceServer interface {
	RegisterAccount(context.Context, *RegisterRequest) (*UserResponse, error)
	CreateSubreddit(context.Context, *SubredditRequest) (*SubredditResponse, error)
	JoinSubreddit(context.Context, *JoinRequest) (*StatusResponse, error)
	LeaveSubreddit(context.Context, *JoinRequest) (*StatusResponse, error)
	CreatePost(context.Context, *PostRequest) (*PostResponse, error)
	CreateComment(context.Context, *CommentRequest) (*CommentResponse, error)
	Vote(context.Context, *VoteRequest) (*StatusResponse, error)
	GetFeed(context.Context, *FeedRequest) (*FeedResponse, error)
	SendMessage(context.Context, *MessageRequest) (*MessageResponse, error)
	GetUserMessages(context.Context, *UserRequest) (*MessagesResponse, error)
	mustEmbedUnimplementedRedditServiceServer()
}

// UnimplementedRedditServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRedditServiceServer struct{}

func (UnimplementedRedditServiceServer) RegisterAccount(context.Context, *RegisterRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAccount not implemented")
}
func (UnimplementedRedditServiceServer) CreateSubreddit(context.Context, *SubredditRequest) (*SubredditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubreddit not implemented")
}
func (UnimplementedRedditServiceServer) JoinSubreddit(context.Context, *JoinRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinSubreddit not implemented")
}
func (UnimplementedRedditServiceServer) LeaveSubreddit(context.Context, *JoinRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveSubreddit not implemented")
}
func (UnimplementedRedditServiceServer) CreatePost(context.Context, *PostRequest) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedRedditServiceServer) CreateComment(context.Context, *CommentRequest) (*CommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedRedditServiceServer) Vote(context.Context, *VoteRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedRedditServiceServer) GetFeed(context.Context, *FeedRequest) (*FeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeed not implemented")
}
func (UnimplementedRedditServiceServer) SendMessage(context.Context, *MessageRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedRedditServiceServer) GetUserMessages(context.Context, *UserRequest) (*MessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserMessages not implemented")
}
func (UnimplementedRedditServiceServer) mustEmbedUnimplementedRedditServiceServer() {}
func (UnimplementedRedditServiceServer) testEmbeddedByValue()                       {}

// UnsafeRedditServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedditServiceServer will
// result in compilation errors.
type UnsafeRedditServiceServer interface {
	mustEmbedUnimplementedRedditServiceServer()
}

func RegisterRedditServiceServer(s grpc.ServiceRegistrar, srv RedditServiceServer) {
	// If the following call pancis, it indicates UnimplementedRedditServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RedditService_ServiceDesc, srv)
}

func _RedditService_RegisterAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedditServiceServer).RegisterAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedditService_RegisterAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedditServiceServer).RegisterAccount(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedditService_CreateSubreddit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubredditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedditServiceServer).CreateSubreddit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedditService_CreateSubreddit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedditServiceServer).CreateSubreddit(ctx, req.(*SubredditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedditService_JoinSubreddit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedditServiceServer).JoinSubreddit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedditService_JoinSubreddit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedditServiceServer).JoinSubreddit(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedditService_LeaveSubreddit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedditServiceServer).LeaveSubreddit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedditService_LeaveSubreddit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedditServiceServer).LeaveSubreddit(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedditService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedditServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedditService_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedditServiceServer).CreatePost(ctx, req.(*PostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedditService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedditServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedditService_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedditServiceServer).CreateComment(ctx, req.(*CommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedditService_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedditServiceServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedditService_Vote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedditServiceServer).Vote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedditService_GetFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedditServiceServer).GetFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedditService_GetFeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedditServiceServer).GetFeed(ctx, req.(*FeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedditService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedditServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedditService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedditServiceServer).SendMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedditService_GetUserMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedditServiceServer).GetUserMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedditService_GetUserMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedditServiceServer).GetUserMessages(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RedditService_ServiceDesc is the grpc.ServiceDesc for RedditService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedditService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reddit.RedditService",
	HandlerType: (*RedditServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAccount",
			Handler:    _RedditService_RegisterAccount_Handler,
		},
		{
			MethodName: "CreateSubreddit",
			Handler:    _RedditService_CreateSubreddit_Handler,
		},
		{
			MethodName: "JoinSubreddit",
			Handler:    _RedditService_JoinSubreddit_Handler,
		},
		{
			MethodName: "LeaveSubreddit",
			Handler:    _RedditService_LeaveSubreddit_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _RedditService_CreatePost_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _RedditService_CreateComment_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _RedditService_Vote_Handler,
		},
		{
			MethodName: "GetFeed",
			Handler:    _RedditService_GetFeed_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _RedditService_SendMessage_Handler,
		},
		{
			MethodName: "GetUserMessages",
			Handler:    _RedditService_GetUserMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/reddit.proto",
}
